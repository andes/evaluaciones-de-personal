import { Environment, NxJson } from './shared-interfaces';
import { ProjectGraphNode } from './project-graph';
import { NxArgs } from '../command-line/utils';
export interface FileData {
    file: string;
    mtime: number;
    ext: string;
}
export interface Change {
    type: string;
}
export interface FileChange<T extends Change = Change> extends FileData {
    getChanges: () => T[];
}
export declare class WholeFileChange implements Change {
    type: string;
}
export declare function isWholeFileChange(change: Change): change is WholeFileChange;
export declare function calculateFileChanges(files: string[], nxArgs?: NxArgs, readFileAtRevision?: (f: string, r: void | string) => string, ignore?: any): FileChange[];
export declare const TEN_MEGABYTES: number;
export declare function allFilesInDir(dirName: string, recurse?: boolean): FileData[];
export declare function readWorkspaceJson(): any;
export declare function cliCommand(): "ng" | "nx";
export declare function workspaceFileName(): "workspace.json" | "angular.json";
export declare function defaultFileRead(filePath: string): string;
export declare function readPackageJson(): any;
export declare function readNxJson(): NxJson;
export declare function rootWorkspaceFileNames(): string[];
export declare function rootWorkspaceFileData(): FileData[];
export declare function readWorkspaceFiles(): FileData[];
export declare function readEnvironment(target: string, projects: Record<string, ProjectGraphNode>): Environment;
/**
 * Returns the time when file was last modified
 * Returns -Infinity for a non-existent file
 */
export declare function mtime(filePath: string): number;
export declare function normalizedProjectRoot(p: ProjectGraphNode): string;
