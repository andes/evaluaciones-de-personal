"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ast_utils_1 = require("./ast-utils");
const fs_1 = require("fs");
const version_utils_1 = require("./version-utils");
const semver_1 = require("semver");
function updatePackagesInPackageJson(migrationFilePath, versionName) {
    const migrations = JSON.parse(fs_1.readFileSync(migrationFilePath).toString());
    const packageJsonUpdates = migrations.packageJsonUpdates[versionName];
    // should never happen
    if (!packageJsonUpdates) {
        throw new Error(`Cannot find ${versionName} in migrations.json`);
    }
    const updatedPackages = packageJsonUpdates.packages;
    return ast_utils_1.updateJsonInTree('package.json', json => {
        Object.keys(updatedPackages).forEach(p => {
            /**
             * Check the updated version against semver
             */
            const cleanUpdatedVersion = version_utils_1.checkAndCleanWithSemver(p, updatedPackages[p].version);
            if (json.devDependencies && json.devDependencies[p]) {
                const cleanDevVersion = version_utils_1.checkAndCleanWithSemver(p, json.devDependencies[p]);
                if (semver_1.lt(cleanDevVersion, cleanUpdatedVersion)) {
                    json.devDependencies[p] = updatedPackages[p].version;
                }
            }
            else if (json.dependencies && json.dependencies[p]) {
                const cleanVersion = version_utils_1.checkAndCleanWithSemver(p, json.dependencies[p]);
                if (semver_1.lt(cleanVersion, cleanUpdatedVersion)) {
                    json.dependencies[p] = updatedPackages[p].version;
                }
            }
            else if (updatedPackages[p].alwaysAddToPackageJson) {
                const cleanVersion = version_utils_1.checkAndCleanWithSemver(p, json.dependencies[p]);
                if (semver_1.lt(cleanVersion, cleanUpdatedVersion)) {
                    if (!json.dependencies)
                        json.dependencies = {};
                    json.dependencies[p] = updatedPackages[p].version;
                }
            }
        });
        return json;
    });
}
exports.updatePackagesInPackageJson = updatePackagesInPackageJson;
