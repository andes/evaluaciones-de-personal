"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ResponsiveDirective = /** @class */ (function () {
    function ResponsiveDirective(el, render) {
        this.el = el;
        this.render = render;
        this.width = 0;
    }
    ResponsiveDirective.prototype.checkDimension = function () {
        this.width = this.el.nativeElement.clientWidth;
        this.render.removeClass(this.el.nativeElement, 'size-xs');
        this.render.removeClass(this.el.nativeElement, 'size-md');
        this.render.removeClass(this.el.nativeElement, 'size-xl');
        if (this.width >= 1024) {
            this.render.addClass(this.el.nativeElement, 'size-xl');
        }
        else if (this.width >= 768 && this.width < 1024) {
            this.render.addClass(this.el.nativeElement, 'size-md');
        }
        else if (this.width < 768) {
            this.render.addClass(this.el.nativeElement, 'size-xs');
        }
    };
    ResponsiveDirective.prototype.ngAfterViewChecked = function () {
        this.checkDimension();
    };
    ResponsiveDirective.prototype.onResize = function () {
        this.checkDimension();
    };
    __decorate([
        core_1.HostListener('window:resize', ['event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ResponsiveDirective.prototype, "onResize", null);
    ResponsiveDirective = __decorate([
        core_1.Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[responsive]'
        }),
        __metadata("design:paramtypes", [core_1.ElementRef,
            core_1.Renderer2])
    ], ResponsiveDirective);
    return ResponsiveDirective;
}());
exports.ResponsiveDirective = ResponsiveDirective;
//# sourceMappingURL=../../../src/lib/directives/responsive.directive.js.map