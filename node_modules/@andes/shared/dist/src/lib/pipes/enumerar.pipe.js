"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
/**
 * Toma cualquier array de objetos y los imprime separados
 * Ejemplos:
 * 1. Tipos de Prestaciones: {{ tipoPrestacion | enumerar:['term'] }}       ==> prestación 1 - prestación 2 - ...
 * 2. Profesionales: {{ profesionales | enumerar:['apellido','nombre'] }}   ==> apellido 1, nombre 1 - apeliido 2, nombre 2 - ...
 * 2. Profesionales: {{ profesionales | enumerar:['apellido','nombre']:'/' }}   ==> apellido 1, nombre 1 / apeliido 2, nombre 2 / ...
 */
var EnumerarPipe = /** @class */ (function () {
    function EnumerarPipe() {
    }
    EnumerarPipe.prototype.transform = function (values, args, itemSeparator, fieldSeparator) {
        if (itemSeparator === void 0) { itemSeparator = '-'; }
        if (fieldSeparator === void 0) { fieldSeparator = ','; }
        return values.map(function (value) {
            return args.map(function (key, i) {
                return value[String(args[i])];
            }).join(fieldSeparator + " "); // Separa valores dentro del mismo objeto con coma
        }).join(" " + itemSeparator + " "); // Separa objetos con un guión (default)
    };
    EnumerarPipe = __decorate([
        core_1.Pipe({ name: 'enumerar' })
    ], EnumerarPipe);
    return EnumerarPipe;
}());
exports.EnumerarPipe = EnumerarPipe;
//# sourceMappingURL=enumerar.pipe.js.map