"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
// import { RequestOptions, URLSearchParams } from '@angular/http';
var http_1 = require("@angular/common/http");
var core_1 = require("@angular/core");
var plex_1 = require("@andes/plex");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
// Constantes
var defaultOptions = { params: null, showError: true, showLoader: true };
var Server = /** @class */ (function () {
    function Server(http, plex) {
        this.http = http;
        this.plex = plex;
    }
    Server.prototype.parse = function (data) {
        var dateISO = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:[.,]\d+)?Z/i;
        var dateNet = /\/Date\((-?\d+)(?:-\d+)?\)\//i;
        var traverse = function (o, func) {
            for (var _i = 0, _a = Object.keys(o); _i < _a.length; _i++) {
                var i = _a[_i];
                o[i] = func.apply(this, [i, o[i]]);
                if (o[i] !== null && typeof (o[i]) === 'object') {
                    traverse(o[i], func);
                }
            }
        };
        var replacer = function (key, value) {
            if (typeof (value) === 'string') {
                if (dateISO.test(value)) {
                    return new Date(value);
                }
                if (dateNet.test(value)) {
                    return new Date(parseInt(dateNet.exec(value)[1], 10));
                }
            }
            return value;
        };
        if (typeof data === 'object') {
            traverse(data, replacer);
        }
        return data;
    };
    Server.prototype.stringify = function (object) {
        return JSON.stringify(object);
    };
    Server.prototype.prepareOptions = function (options) {
        var result = {
            headers: new http_1.HttpHeaders({
                'Content-Type': 'application/json',
                'Authorization': window.sessionStorage.getItem('jwt') ? 'JWT ' + window.sessionStorage.getItem('jwt') : ''
            }),
        };
        if (options && options.params) {
            result.params = new http_1.HttpParams();
            var _loop_1 = function (param) {
                if (options.params[param] !== undefined && options.params[param] !== null) {
                    if (Array.isArray(options.params[param])) {
                        options.params[param].forEach(function (value) {
                            result.params = result.params.append(param, value);
                        });
                    }
                    else {
                        if (options.params[param] instanceof Date) {
                            result.params = result.params.set(param, options.params[param].toISOString());
                        }
                        else {
                            result.params = result.params.set(param, options.params[param]);
                        }
                    }
                }
            };
            for (var param in options.params) {
                _loop_1(param);
            }
        }
        return result;
    };
    Server.prototype.updateLoader = function (show, options) {
        if (!options || options.showLoader || (options.showLoader === undefined)) {
            if (show) {
                this.plex.showLoader();
            }
            else {
                this.plex.hideLoader();
            }
        }
    };
    Server.prototype.handleError = function (response, options) {
        var message;
        if (response.error && response.error.message) {
            message = response.error.message;
        }
        else {
            message = 'La aplicaci贸n no pudo comunicarse con el servidor. Por favor revise su conexi贸n a la red.';
        }
        if (!options || options.showError || (options.showError === undefined)) {
            // El c贸digo 400 es usado para enviar mensaje de validaci贸n al usuario
            if (response.status === 400) {
                this.plex.info('warning', "<div class=\"text-muted small pt-3\">C\u00F3digo de error: " + response.status + "</div>", message);
            }
            else {
                this.plex.info('danger', message + "<div class=\"text-muted small pt-3\">C\u00F3digo de error: " + response.status + "</div>", 'No se pudo conectar con el servidor');
            }
        }
        return rxjs_1.throwError(message);
    };
    Server.prototype.getAbsoluteURL = function (url) {
        if (url.toLowerCase().startsWith('http')) {
            return url;
        }
        else {
            return this.baseURL + url;
        }
    };
    Server.prototype.setBaseURL = function (baseURL) {
        this.baseURL = baseURL;
    };
    Server.prototype.get = function (url, options) {
        var _this = this;
        if (options === void 0) { options = defaultOptions; }
        this.updateLoader(true, options);
        return this.http.get(this.getAbsoluteURL(url), this.prepareOptions(options)).pipe(operators_1.finalize(function () { return _this.updateLoader(false, options); }), operators_1.map(function (res) { return _this.parse(res); }), operators_1.catchError(function (err) { return _this.handleError(err, options); }));
    };
    Server.prototype.post = function (url, body, options) {
        var _this = this;
        if (options === void 0) { options = null; }
        this.updateLoader(true, options);
        return this.http.post(this.getAbsoluteURL(url), this.stringify(body), this.prepareOptions(options)).pipe(operators_1.finalize(function () { return _this.updateLoader(false, options); }), operators_1.map(function (res) { return _this.parse(res); }), operators_1.catchError(function (err) { return _this.handleError(err, options); }));
    };
    Server.prototype.put = function (url, body, options) {
        var _this = this;
        if (options === void 0) { options = defaultOptions; }
        this.updateLoader(true, options);
        return this.http.put(this.getAbsoluteURL(url), this.stringify(body), this.prepareOptions(options)).pipe(operators_1.finalize(function () { return _this.updateLoader(false, options); }), operators_1.map(function (res) { return _this.parse(res); }), operators_1.catchError(function (err) { return _this.handleError(err, options); }));
    };
    Server.prototype.patch = function (url, body, options) {
        var _this = this;
        if (options === void 0) { options = defaultOptions; }
        this.updateLoader(true, options);
        return this.http.patch(this.getAbsoluteURL(url), this.stringify(body), this.prepareOptions(options)).pipe(operators_1.finalize(function () { return _this.updateLoader(false, options); }), operators_1.map(function (res) { return _this.parse(res); }), operators_1.catchError(function (err) { return _this.handleError(err, options); }));
    };
    Server.prototype.delete = function (url, options) {
        var _this = this;
        if (options === void 0) { options = defaultOptions; }
        this.updateLoader(true, options);
        return this.http.delete(this.getAbsoluteURL(url), this.prepareOptions(options)).pipe(operators_1.finalize(function () { return _this.updateLoader(false, options); }), operators_1.map(function (res) { return _this.parse(res); }), operators_1.catchError(function (err) { return _this.handleError(err, options); }));
    };
    Server = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient, plex_1.Plex])
    ], Server);
    return Server;
}());
exports.Server = Server;
//# sourceMappingURL=server.service.js.map