import * as express from 'express';
interface PackageJson {
    name: string;
    version: string;
}
interface MSRouter extends express.Router {
    group(path: String, callback: (router: MSRouter) => void): void;
    group(callback: (router: MSRouter) => void): void;
}
export interface ApiBootstrapConfig {
    host?: string;
    port?: number;
    key?: string;
    expiresIn?: number;
    cors?: boolean;
}
declare function MSRouter(this: any): MSRouter;
export declare function Router(): express.Router;
declare type RouterExtendConfig = {
    path: string;
    router: express.Router;
};
export declare type RouterConfig = express.Router | RouterExtendConfig;
export declare class ApiBootstrap {
    private expressApp;
    private _routes;
    private _info;
    private port;
    private jwtKey;
    private expiresIn;
    private passport;
    private cors;
    private server;
    private host;
    constructor(info: PackageJson, { port, host, key, expiresIn, cors }?: ApiBootstrapConfig);
    add(router: RouterConfig): void;
    stop(): void;
    start(): express.Express;
    router(): MSRouter;
    authenticate(): any[];
    optional(): ((req: any, res: any, next: any) => void)[];
    sign(payload: any, expiresIn?: number): Promise<string>;
}
export {};
