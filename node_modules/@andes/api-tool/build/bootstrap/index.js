"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const boolParser = require("express-query-boolean");
const bodyParser = require("body-parser");
const express = require("express");
const auth_1 = require("./auth");
const error_middleware_1 = require("./error-middleware");
const jwt = require("jsonwebtoken");
const passport_1 = require("passport");
function MSRouter() {
    const r = express.Router.apply(this, arguments);
    r.group = function (arg1, arg2) {
        let fn, path;
        if (arg2 === undefined) {
            path = '/';
            fn = arg1;
        }
        else {
            path = arg1;
            fn = arg2;
        }
        let router = MSRouter();
        fn(router);
        this.use(path, router);
        return router;
    };
    return r;
}
function Router() {
    return express.Router();
}
exports.Router = Router;
class ApiBootstrap {
    constructor(info, { port, host, key, expiresIn, cors } = {}) {
        this._routes = [];
        this.port = 3000;
        this.passport = new passport_1.Passport();
        this.cors = true;
        this._info = info;
        this.port = port || 3000;
        this.jwtKey = key;
        this.expiresIn = expiresIn || 60 * 60 * 24; // 1 day
        this.cors = cors || true;
        this.host = host;
    }
    add(router) {
        this._routes.push(router);
    }
    stop() {
        this.server.close();
    }
    start() {
        this.expressApp = express();
        if (this.jwtKey) {
            this.passport = auth_1.initialize(this.passport, this.expressApp, this.jwtKey);
        }
        // Configura Express
        this.expressApp.use(bodyParser.json({ limit: '150mb' }));
        this.expressApp.use(boolParser());
        this.expressApp.use(bodyParser.urlencoded({
            extended: true
        }));
        // CORS
        if (this.cors) {
            this.expressApp.all('*', (req, res, next) => {
                res.header('Access-Control-Allow-Origin', '*');
                res.header('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,PATCH,OPTIONS');
                res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
                // Permitir que el método OPTIONS funcione sin autenticación
                if ('OPTIONS' === req.method) {
                    res.header('Access-Control-Max-Age', '1728000');
                    res.sendStatus(200);
                }
                else {
                    next();
                }
            });
        }
        if (this.jwtKey) {
            this.expressApp.get('/session', this.authenticate(), (req, res) => {
                const user = req.user;
                delete user.iat;
                delete user.exp;
                return res.json(user);
            });
        }
        this.expressApp.get('/alive', (req, res) => {
            res.json({ status: 'OK' });
        });
        this.expressApp.get('/version', (req, res) => {
            res.json({
                name: this._info.name,
                version: this._info.version
            });
        });
        for (const routerConfig of this._routes) {
            if (routerConfig.path) {
                const r = routerConfig;
                this.expressApp.use(r.path, r.router);
            }
            else {
                this.expressApp.use(routerConfig);
            }
        }
        // Error handler
        this.expressApp.use(error_middleware_1.ErrorHandler(this.expressApp.get('env')));
        this.server = this.expressApp.listen(this.port, this.host, () => {
        });
        return this.expressApp;
    }
    router() {
        return MSRouter();
    }
    authenticate() {
        return [
            this.passport.authenticate('jwt', { session: false })
        ];
    }
    optional() {
        if (this.jwtKey) {
            return [
                auth_1.optionalAuth(this.jwtKey)
            ];
        }
        else {
            throw new Error('JWT Key not set');
        }
    }
    async sign(payload, expiresIn = null) {
        if (this.jwtKey) {
            return new Promise((resolve, reject) => {
                return jwt.sign(payload, this.jwtKey, { expiresIn: expiresIn || this.expiresIn }, (err, token) => {
                    if (err) {
                        return reject(err);
                    }
                    return resolve(token);
                });
            });
        }
        else {
            throw new Error('JWT Key not set');
        }
    }
}
exports.ApiBootstrap = ApiBootstrap;
//# sourceMappingURL=index.js.map