/// <reference types="express" />
import { Model as _Model, Types, Document } from 'mongoose';
import { Request, IOptions, Router } from '@andes/api-tool';
export declare type ObjectId = string | Types.ObjectId;
export declare class ResourceNotFound extends Error {
    status: number;
    message: string;
}
export declare class ResourceForbidden extends Error {
    status: number;
    message: string;
}
export declare class CustomError extends Error {
    status: number;
    constructor(message: string, status?: number);
}
export interface RouteConfiguration {
    method?: string;
    path: string;
    callback: Function | string;
}
/**
 * [TODO] Simple searchFilter from schema type by default
 */
export declare abstract class ResourceBase<T extends Document = any> {
    abstract Model: _Model<T>;
    keyId: string;
    resourceModule: string;
    resourceName: string;
    searchFileds: object;
    routesEnable: string[];
    middlewares: any[];
    routesAuthorization: {};
    extrasRoutes: RouteConfiguration[];
    eventBus: any;
    constructor(args?: any);
    /**
     * Popula datos antes de guardar.
     * Se podr√≠a usar el middleware de mongoose
     */
    populate(dto: any): Promise<any>;
    private isRouteEnabled;
    makeMiddleware(routeName: string): any[];
    checkAuthorization(routeName: string, req: Request): any;
    create(dto: any, req: Request): Promise<T>;
    update(id: ObjectId, data: any, req: Request): Promise<T>;
    remove(id: ObjectId): Promise<T>;
    presearch(data: Object, req: Request): Promise<{}>;
    search(data: any, options: IOptions, req: Request): Promise<T[]>;
    findById(id: ObjectId | any, options: IOptions): Promise<T>;
    makeRoutes(): Router;
}
