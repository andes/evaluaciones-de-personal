"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mongoose_1 = require("mongoose");
var moment = require("moment");
var ObjectId = mongoose_1.Types.ObjectId;
var Logger = /** @class */ (function () {
    function Logger(options) {
        this.connection = null;
        this.module = '';
        this.type = '';
        this.expiredAt = '';
        this.bucketBy = 'day';
        this.duration = null;
        this.application = '';
        this._options = options;
        var connection = options.connection, module = options.module, _a = options.type, type = _a === void 0 ? null : _a, _b = options.expiredAt, expiredAt = _b === void 0 ? null : _b, _c = options.bucketBy, bucketBy = _c === void 0 ? 'd' : _c, _d = options.level, level = _d === void 0 ? null : _d, _e = options.application, application = _e === void 0 ? undefined : _e, _f = options.traceId, traceId = _f === void 0 ? undefined : _f;
        if (!connection) {
            throw new Error('no connection parameter');
        }
        if (!module || typeof module !== 'string') {
            throw new Error('no module parameter');
        }
        this.connection = connection;
        this.module = module;
        this.type = type;
        this.expiredAt = expiredAt;
        this.bucketBy = bucketBy;
        this.level = level;
        this.application = application;
        this.traceId = traceId;
        if (this.expiredAt) {
            this.duration = this.expiredOffset(this.expiredAt);
        }
        this.createCollection();
    }
    Logger.prototype.createCollection = function () {
        return __awaiter(this, void 0, void 0, function () {
            var collection;
            return __generator(this, function (_a) {
                collection = this.connection.collection(this.module);
                collection.createIndex({ expiredAt: 1 }, { expireAfterSeconds: 0 });
                collection.createIndex({ type: 1, start: 1, end: 1, level: 1, bucketNumber: 1 }, { expireAfterSeconds: 0 });
                return [2 /*return*/];
            });
        });
    };
    Logger.prototype.getCollection = function (module) {
        module = module || this.module;
        return this.connection.collection(module);
    };
    Logger.prototype.expiredOffset = function (expiredAt) {
        var _a = expiredAt.split(' '), num = _a[0], unit = _a[1];
        return moment.duration(parseInt(num, 2), unit);
    };
    Logger.prototype.log = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            function client(request) {
                if (!request) {
                    return undefined;
                }
                return {
                    ip: request.ip,
                    userAgent: request.useragent
                };
            }
            function server(request) {
                if (!request) {
                    return {
                        hostname: require('os').hostname()
                    };
                }
                else {
                    return {
                        hostname: require('os').hostname(),
                        ip: request.connection && request.connection.localAddress
                    };
                }
            }
            function user(request) {
                if (!request) {
                    return undefined;
                }
                return request.user && (request.user.usuario || request.user.app);
            }
            function organizacion(request) {
                if (!request) {
                    return undefined;
                }
                return request.user && request.user.organizacion;
            }
            function url(request) {
                if (!request) {
                    return undefined;
                }
                return { url: req.originalUrl, method: req.method };
            }
            var collection, now, level, type, bucketBy, application, expiredAt, action, data, req, error, bucketNumber, execLog, retry, err_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        collection = this.getCollection(this.module);
                        now = new Date();
                        level = options.level || this.level;
                        type = options.type || this.type;
                        bucketBy = options.bucketBy || this.bucketBy;
                        application = options.application || this.application;
                        expiredAt = this.duration ? moment(now).add(this.duration).toDate() : null;
                        action = options.action, data = options.data, req = options.req, error = options.error;
                        bucketNumber = 0;
                        execLog = function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, collection.update({
                                        level: level,
                                        type: type,
                                        start: { $lte: now },
                                        end: { $gte: now },
                                        bucketNumber: bucketNumber
                                    }, {
                                        $inc: { count: 1 },
                                        $setOnInsert: {
                                            start: moment(now).startOf(bucketBy).toDate(),
                                            end: moment(now).endOf(bucketBy).toDate(),
                                            level: level,
                                            type: type,
                                            expiredAt: expiredAt,
                                            bucketNumber: bucketNumber
                                        },
                                        $push: {
                                            entries: {
                                                application: application,
                                                date: now,
                                                id: data && data._id,
                                                traceId: this.traceId,
                                                data: data,
                                                error: error,
                                                action: action,
                                                user: user(req),
                                                organizacion: organizacion(req),
                                                cliente: client(req),
                                                servidor: server(req),
                                                url: url(req)
                                            }
                                        }
                                    }, {
                                        upsert: true
                                    })];
                            });
                        }); };
                        retry = true;
                        _a.label = 1;
                    case 1:
                        if (!retry) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, execLog()];
                    case 3:
                        _a.sent();
                        retry = false;
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        if (err_1.code === 17419) {
                            console.warn('document size limit: consider an smaller bucket');
                            bucketNumber++;
                        }
                        else {
                            retry = false;
                        }
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Logger.prototype.getOptions = function (args) {
        if (typeof args[0] === 'object') {
            return args[0];
        }
        else {
            return {
                action: args[0],
                data: args[1],
                req: args[2]
            };
        }
    };
    Logger.prototype.info = function () {
        var args = this.getOptions(arguments);
        return this.log(__assign({}, args, { level: 'info' }));
    };
    Logger.prototype.error = function () {
        var args;
        if (typeof arguments[0] === 'object') {
            args = arguments[0];
        }
        else {
            args = {
                action: arguments[0],
                data: arguments[1],
                error: arguments[2],
                req: arguments[3]
            };
        }
        return this.log(__assign({}, args, { level: 'error' }));
    };
    Logger.prototype.startTrace = function (id) {
        if (id === void 0) { id = null; }
        if (!id) {
            id = String(new ObjectId());
        }
        return new Logger(__assign({ traceId: id }, this._options));
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=logger.class.js.map