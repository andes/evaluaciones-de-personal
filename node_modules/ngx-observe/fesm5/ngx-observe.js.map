{"version":3,"file":"ngx-observe.js","sources":["ng://ngx-observe/lib/ngx-observe.directive.ts","ng://ngx-observe/lib/ngx-observe.module.ts","ng://ngx-observe/public-api.ts","ng://ngx-observe/ngx-observe.ts"],"sourcesContent":["import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n  Éµstringify as stringify\n} from '@angular/core'\nimport {AsyncSubject, Observable, Subject} from 'rxjs'\nimport {concatMap, takeUntil} from 'rxjs/operators'\n\nfunction assertTemplate(property: string, templateRef: TemplateRef<any> | null): void {\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView)\n  if (!isTemplateRefOrNull) {\n    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`)\n  }\n}\n\nexport class ObserveContext<T = unknown> {\n  $implicit: T\n  ngxObserve: T\n\n  constructor(value: T) {\n    this.$implicit = value\n    this.ngxObserve = value\n  }\n}\n\nexport class ErrorContext {\n  $implicit: Error\n\n  constructor(error: Error) {\n    this.$implicit = error\n  }\n}\n\n@Directive({\n  selector: '[ngxObserve]'\n})\nexport class NgxObserve<T = unknown> implements OnDestroy, OnInit {\n\n  // tslint:disable-next-line:variable-name\n  static ngTemplateGuard_ngxObserve: 'binding'\n\n  private nextTemplateRef: TemplateRef<ObserveContext<T>>\n  private errorTemplateRef: TemplateRef<ErrorContext>\n  private beforeTemplateRef: TemplateRef<undefined>\n  private nextViewRef: EmbeddedViewRef<ObserveContext<T>> | undefined\n  private errorViewRef: EmbeddedViewRef<ErrorContext> | undefined\n  private beforeViewRef: EmbeddedViewRef<undefined> | undefined\n  private unsubscribe = new Subject<void>()\n  private init = new AsyncSubject<void>()\n  private source: Observable<T>\n\n  constructor(\n    private view: ViewContainerRef,\n    private changes: ChangeDetectorRef,\n    nextTemplateRef: TemplateRef<ObserveContext<T>>\n  ) {\n    this.nextTemplateRef = nextTemplateRef\n  }\n\n  @Input()\n  set ngxObserve(source: Observable<T>) {\n    if (this.source && source !== this.source) {\n      this.unsubscribe.next(undefined)\n    }\n    if (source && source !== this.source) {\n      if (this.beforeTemplateRef) {\n        this.view.clear()\n        this.nextViewRef = undefined\n        this.errorViewRef = undefined\n        this.beforeViewRef = this.view.createEmbeddedView(this.beforeTemplateRef)\n      }\n      this.init.pipe(\n        concatMap(() => {\n          if (this.beforeTemplateRef) {\n            this.view.clear()\n            this.nextViewRef = undefined\n            this.errorViewRef = undefined\n            this.beforeViewRef = this.view.createEmbeddedView(this.beforeTemplateRef)\n          }\n          return source\n        }),\n        takeUntil(this.unsubscribe)\n      ).subscribe(value => {\n        this.view.clear()\n        this.errorViewRef = undefined\n        this.beforeViewRef = undefined\n        this.nextViewRef = this.view.createEmbeddedView(this.nextTemplateRef, new ObserveContext<T>(value))\n        this.changes.markForCheck()\n      }, error => {\n        if (this.errorTemplateRef) {\n          this.view.clear()\n          this.beforeViewRef = undefined\n          this.nextViewRef = undefined\n          this.errorViewRef = this.view.createEmbeddedView(this.errorTemplateRef, new ErrorContext(error))\n          this.changes.markForCheck()\n        }\n      })\n    }\n    this.source = source\n  }\n\n  @Input()\n  set ngxObserveError(ref: TemplateRef<ErrorContext>) {\n    assertTemplate('ngxObserveError', ref)\n    this.errorTemplateRef = ref\n    if (this.errorViewRef) {\n      this.view.clear()\n      this.errorViewRef = this.view.createEmbeddedView(this.errorTemplateRef, this.errorViewRef.context)\n    }\n  }\n\n  @Input()\n  set ngxObserveBefore(ref: TemplateRef<undefined>) {\n    assertTemplate('ngxObserveBefore', ref)\n    this.beforeTemplateRef = ref\n    if (this.beforeViewRef) {\n      this.view.clear()\n      this.beforeViewRef = this.view.createEmbeddedView(this.beforeTemplateRef)\n    }\n  }\n\n  @Input()\n  set ngxObserveNext(ref: TemplateRef<ObserveContext<T>>) {\n    assertTemplate('ngxObserveNext', ref)\n    this.nextTemplateRef = ref\n    if (this.nextViewRef) {\n      this.view.clear()\n      this.nextViewRef = this.view.createEmbeddedView(this.nextTemplateRef, this.nextViewRef.context)\n      this.changes.markForCheck()\n    }\n  }\n\n  static ngTemplateContextGuard<T>(dir: NgxObserve<T>, ctx: any): ctx is ObserveContext<NonNullable<T>> {\n    return true\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe.next(undefined)\n  }\n\n  ngOnInit() {\n    this.init.next(undefined)\n    this.init.complete()\n  }\n\n}\n","import {NgModule} from '@angular/core'\nimport {NgxObserve} from './ngx-observe.directive'\n\n@NgModule({\n  declarations: [NgxObserve],\n  imports: [],\n  exports: [NgxObserve]\n})\nexport class NgxObserveModule {\n}\n","/*\n * Public API Surface of ngx-observe\n */\n\nexport * from './lib/ngx-observe.directive'\nexport * from './lib/ngx-observe.module'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["stringify"],"mappings":"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"}