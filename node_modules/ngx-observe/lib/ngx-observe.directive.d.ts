import { ChangeDetectorRef, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { Observable } from 'rxjs';
export declare class ObserveContext<T = unknown> {
    $implicit: T;
    ngxObserve: T;
    constructor(value: T);
}
export declare class ErrorContext {
    $implicit: Error;
    constructor(error: Error);
}
export declare class NgxObserve<T = unknown> implements OnDestroy, OnInit {
    private view;
    private changes;
    static ngTemplateGuard_ngxObserve: 'binding';
    private nextTemplateRef;
    private errorTemplateRef;
    private beforeTemplateRef;
    private nextViewRef;
    private errorViewRef;
    private beforeViewRef;
    private unsubscribe;
    private init;
    private source;
    constructor(view: ViewContainerRef, changes: ChangeDetectorRef, nextTemplateRef: TemplateRef<ObserveContext<T>>);
    set ngxObserve(source: Observable<T>);
    set ngxObserveError(ref: TemplateRef<ErrorContext>);
    set ngxObserveBefore(ref: TemplateRef<undefined>);
    set ngxObserveNext(ref: TemplateRef<ObserveContext<T>>);
    static ngTemplateContextGuard<T>(dir: NgxObserve<T>, ctx: any): ctx is ObserveContext<NonNullable<T>>;
    ngOnDestroy(): void;
    ngOnInit(): void;
}
